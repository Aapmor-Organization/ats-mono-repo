name: Build and Deploy to EC2

on:
  push:
    branches: [devops]

env:
  GHCR_REGISTRY: ghcr.io
  IMAGE_BACKEND: ats-mono-repo-backend
  IMAGE_FRONTEND: ats-mono-repo-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up image tag
        id: vars
        run: echo "TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push backend image
        run: |
          docker build -t $GHCR_REGISTRY/${{ secrets.GHCR_USERNAME }}/$IMAGE_BACKEND:$TAG ./backend
          docker push $GHCR_REGISTRY/${{ secrets.GHCR_USERNAME }}/$IMAGE_BACKEND:$TAG

      - name: Build and push frontend image
        run: |
          docker build -t $GHCR_REGISTRY/${{ secrets.GHCR_USERNAME }}/$IMAGE_FRONTEND:$TAG ./frontend
          docker push $GHCR_REGISTRY/${{ secrets.GHCR_USERNAME }}/$IMAGE_FRONTEND:$TAG

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy on EC2
        env:
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          ENV_FILES: ${{ secrets.ENV_FILES }}
          TAG: ${{ env.TAG }}
          GHCR_REGISTRY: ghcr.io
          IMAGE_BACKEND: ats-mono-repo-backend
          IMAGE_FRONTEND: ats-mono-repo-frontend
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "$ENV_FILES" > /home/ubuntu/backend.env

            docker login $GHCR_REGISTRY -u $GHCR_USERNAME -p $GHCR_TOKEN

            docker rm -f backend || true
            docker rm -f frontend || true

            docker pull $GHCR_REGISTRY/$GHCR_USERNAME/$IMAGE_BACKEND:$TAG
            docker pull $GHCR_REGISTRY/$GHCR_USERNAME/$IMAGE_FRONTEND:$TAG

            docker run -d --name backend --env-file /home/ubuntu/backend.env -p 5000:5000 $GHCR_REGISTRY/$GHCR_USERNAME/$IMAGE_BACKEND:$TAG

            docker run -d --name frontend -p 80:3000 $GHCR_REGISTRY/$GHCR_USERNAME/$IMAGE_FRONTEND:$TAG
          EOF
